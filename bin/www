#!/usr/bin/env node

/**
 * Initialize dotenv
 */
require('dotenv').config()
validateEnvs();

/**
 * Initialize database
 */
require("../place/data/dbManager.js");

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('discord-place:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

require("../place/network-manager").createServer(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function validateEnvs() {
  var missingEnvs = [];
  if (!process.env.DISCORD_BOT_TOKEN) {
    missingEnvs.push("DISCORD_BOT_TOKEN");
  }
  if (!process.env.ADMIN_API_TOKEN) {
    missingEnvs.push("ADMIN_API_TOKEN");
  }
  if (!process.env.URL) {
    missingEnvs.push("URL");
  }

  if (missingEnvs.length <= 0) return;
  
  logError("Missing environment variables:");
  missingEnvs.forEach(function(env){
    logError(`- ${env}`);
  });

  logError("\nEither set them or create a .env file in the root directory.");
  logError("For more information, see https://github.com/tensoid/discord-place");

  process.exit(1);
}

function logError(msg){
  console.error("\x1b[31m%s\x1b[0m", msg);
}